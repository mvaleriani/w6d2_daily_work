!function(t){var r={};function e(n){if(r[n])return r[n].exports;var s=r[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,e),s.l=!0,s.exports}e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=4)}([function(t,r){t.exports=function(t){this.msg=t}},function(t,r,e){const n=e(0);class s{constructor(){this.grid=s.makeGrid(),this.marks=["x","o"]}isEmptyPos(t){if(!s.isValidPos(t))throw new n("Is not valid position!");return null===this.grid[t[0]][t[1]]}isOver(){if(null!==this.winner())return!0;for(let t=0;t<3;t++)for(let r=0;r<3;r++)if(this.isEmptyPos([t,r]))return!1;return!0}placeMark(t,r){if(!this.isEmptyPos(t))throw new n("Is not an empty position!");this.grid[t[0]][t[1]]=r}print(){const t=[];for(let r=0;r<3;r++){const e=[];for(let t=0;t<3;t++)e.push(this.grid[r][t]?this.grid[r][t]:" ");t.push(`${e.join("|")}\n`)}console.log(t.join("-----\n"))}winner(){const t=[[[0,0],[0,1],[0,2]],[[1,0],[1,1],[1,2]],[[2,0],[2,1],[2,2]],[[0,0],[1,0],[2,0]],[[0,1],[1,1],[2,1]],[[0,2],[1,2],[2,2]],[[0,0],[1,1],[2,2]],[[2,0],[1,1],[0,2]]];for(let r=0;r<t.length;r++){const e=this.winnerHelper(t[r]);if(null!==e)return e}return null}winnerHelper(t){for(let r=0;r<s.marks.length;r++){const e=s.marks[r];let n=!0;for(let r=0;r<3;r++){const s=t[r];this.grid[s[0]][s[1]]!==e&&(n=!1)}if(n)return e}return null}static isValidPos(t){return 0<=t[0]&&t[0]<3&&0<=t[1]&&t[1]<3}static makeGrid(){const t=[];for(let r=0;r<3;r++){t.push([]);for(let e=0;e<3;e++)t[r].push(null)}return t}}s.marks=["x","o"],t.exports=s},function(t,r,e){const n=e(1),s=e(0);t.exports=class{constructor(){this.board=new n,this.currentPlayer=n.marks[0]}isOver(){return this.board.isOver()}playMove(t){this.board.placeMark(t,this.currentPlayer),this.swapTurn()}promptMove(t,r){this.board.print(),console.log(`Current Turn: ${this.currentPlayer}`),t.question("Enter rowIdx: ",e=>{const n=parseInt(e);t.question("Enter colIdx: ",t=>{const e=parseInt(t);r([n,e])})})}run(t,r){this.promptMove(t,e=>{try{this.playMove(e)}catch(t){if(!(t instanceof s))throw t;console.log(t.msg)}this.isOver()?(this.board.print(),this.winner()?console.log(`${this.winner()} has won!`):console.log("NO ONE WINS!"),r()):this.run(t,r)})}swapTurn(){this.currentPlayer===n.marks[0]?this.currentPlayer=n.marks[1]:this.currentPlayer=n.marks[0]}winner(){return this.board.winner()}}},function(t,r){t.exports=class{constructor(t,r){this.game=t,console.log("test view"),console.log("test view"),this.setupBoard(),this.bindEvents()}bindEvents(){let t=$(".node"),r=this.game;for(var e=0;e<t.length;e++)$(t[e]).on("click",t=>{let e=$(t.target).attr("id").split("_");console.log(e),r.board.isEmptyPos(e)&&this.makeMove($(t.target),e)})}makeMove(t,r){console.log(t),this.game.currentPlayer===this.game.board.marks[0]?t.append($('<img src="./images/bust.gif" alt="">')):t.append('<img src="./images/windows.png" alt="">'),this.game.playMove(r)}setupBoard(){console.log(this);let t=this.game.board.grid;for(let r=0;r<t.length;r++)for(let e=0;e<t[r].length;e++){let t=r+"_"+e;$(".grid").append($(`<li class="node" id="${t}"></li>`))}}}},function(t,r,e){const n=e(3),s=e(2);$(()=>{const t=$(".ttt");let r=new s;new n(r,t)})}]);
//# sourceMappingURL=bundle.js.map